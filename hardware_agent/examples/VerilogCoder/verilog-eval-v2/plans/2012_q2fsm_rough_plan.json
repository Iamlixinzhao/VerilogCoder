[{"id": "1", "content": "Define the module TopModule with input ports clk, reset, w and output port z.", "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.\n\n - input  clk\n - input  reset\n - input  w\n - output z", "parent_tasks": []}, {"id": "2", "content": "Determine the number of states for the FSM based on the state diagram provided.", "source": "The module should implement the state machine shown below:\n\n  A (0) --1--> B\n  A (0) --0--> A\n  B (0) --1--> C\n  B (0) --0--> D\n  C (0) --1--> E\n  C (0) --0--> D\n  D (0) --1--> F\n  D (0) --0--> A\n  E (1) --1--> E\n  E (1) --0--> D\n  F (1) --1--> C\n  F (1) --0--> D", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement the state encoding for the FSM. Assign binary codes to each state (A, B, C, D, E, F).", "source": "Assign any state codes that you wish to use.", "parent_tasks": ["2"]}, {"id": "4", "content": "Implement the state transition logic using an always block. Use the state diagram to define transitions between states based on input w.", "source": "The module should implement the state machine shown below:\n\n  A (0) --1--> B\n  A (0) --0--> A\n  B (0) --1--> C\n  B (0) --0--> D\n  C (0) --1--> E\n  C (0) --0--> D\n  D (0) --1--> F\n  D (0) --0--> A\n  E (1) --1--> E\n  E (1) --0--> D\n  F (1) --1--> C\n  F (1) --0--> D", "parent_tasks": ["3"]}, {"id": "5", "content": "Implement the state flip-flops for state transition. Use the positive edge of the clock and synchronous active-high reset to transition between states.", "source": "Reset resets into state A and is synchronous active-high. Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["4"]}, {"id": "6", "content": "Implement the output logic for z using either continuous assignment statement(s) or an always block. The output z should be 1 when in states E or F, and 0 otherwise.", "source": "The module should implement the state machine shown below:\n\n  E (1) --1--> E\n  E (1) --0--> D\n  F (1) --1--> C\n  F (1) --0--> D", "parent_tasks": ["5"]}]