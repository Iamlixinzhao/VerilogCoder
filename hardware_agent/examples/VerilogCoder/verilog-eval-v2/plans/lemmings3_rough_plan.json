[{"id": "1", "content": "Define the module TopModule with its input and output ports: clk, areset, bump_left, bump_right, ground, dig, walk_left, walk_right, aaah, and digging.", "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.", "parent_tasks": []}, {"id": "2", "content": "Determine the number of states for the finite state machine (FSM) based on the Lemming's behavior: walking left, walking right, falling, and digging.", "source": "Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left. Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement the state transition logic for the FSM, considering the conditions for walking left, walking right, falling, and digging. Ensure that falling has the highest precedence, followed by digging, and then switching directions.", "source": "A walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.", "parent_tasks": ["2"]}, {"id": "4", "content": "Implement the output logic for the FSM to set walk_left, walk_right, aaah, and digging based on the current state.", "source": "In the Lemmings' 2D world, Lemmings can be in the states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left.", "parent_tasks": ["3"]}]