[{"id": "1", "content": "```\nDefine the module TopModule with input ports clk, load, and data (512 bits), and output port q (512 bits).\n\nRetrieved Related Information:\nclk: Clock signal for synchronization\nload: Synchronous active high load input\ndata: 512-bit input data to load into the system\nq: 512-bit output representing the state of the cellular automaton\n```\n", "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.\n\n - input  clk\n - input  load\n - input  data (512 bits)\n - output q    (512 bits)", "parent_tasks": []}, {"id": "2", "content": "```\nImplement a register to store the current state of the 512-cell system. This register should be updated on the positive edge of the clock. If the load signal is high, the register should be loaded with the data input.\n\nRetrieved Related Information:\nclk: Clock signal for synchronization (Type:Signal)\nload: Synchronous active high load input (Type:Signal)\ndata: 512-bit input data to load into the system (Type:Signal)\n```\n", "source": "The synchronous active high load input indicates the state of the system should be loaded with data[511:0]. Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["1"]}, {"id": "3", "content": "```\nImplement the logic for updating each cell in the 512-cell system according to Rule 110. Use the provided table to determine the next state of each cell based on its current state and the state of its two neighbors.\n```\n", "source": "In Rule 110, the next state of each cell depends only on itself and its two neighbours, according to the following table:\n\n  Left[i+1] | Center[i] | Right[i-1] | Center's next state \n  1    | 1      | 1     | 0\n  1    | 1      | 0     | 1\n  1    | 0      | 1     | 1\n  1    | 0      | 0     | 0\n  0    | 1      | 1     | 1\n  0    | 1      | 0     | 1\n  0    | 0      | 1     | 1\n  0    | 0      | 0     | 0", "parent_tasks": ["2"]}, {"id": "4", "content": "```\nImplement boundary conditions for the 512-cell system. The Right boundary of q[0] bit is 0 and the Left boundary of q[511] is 0.\n```\n", "source": "The Right boundary of q[0] bit is 0 and the Left boundary of q[511] is 0.", "parent_tasks": ["3"]}, {"id": "5", "content": "```\nConnect the output q to the register storing the current state of the 512-cell system.\n\nRetrieved Related Information:\nq: 512-bit output representing the state of the cellular automaton (Type:Signal)\n```\n", "source": "The module should implement Rule 110, a one-dimensional cellular automaton with interesting properties (such as being Turing-complete). There is a one-dimensional array of cells (on or off). At each time step, the state of each cell changes.", "parent_tasks": ["4"]}]