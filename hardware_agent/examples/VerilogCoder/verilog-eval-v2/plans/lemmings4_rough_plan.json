[{"id": "1", "content": "Define the module TopModule with its input and output ports: clk, areset, bump_left, bump_right, ground, dig, walk_left, walk_right, aaah, and digging.", "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.", "parent_tasks": []}, {"id": "2", "content": "Determine the number of states for the FSM based on the Lemming's behavior: walking left, walking right, falling, digging, and splattering.", "source": "The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in the states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left.", "parent_tasks": ["1"]}, {"id": "3", "content": "Implement the state register to hold the current state of the FSM. Ensure it resets to the walking left state on areset.", "source": "areset is positive edge triggered asynchronous reseting the Lemming machine to walk left. Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["2"]}, {"id": "4", "content": "Implement the next state logic for the FSM, considering the conditions for walking, falling, digging, and splattering.", "source": "In addition to walking left and right and changing direction when bumped, when ground=0, the Lemming will fall and say \"aaah!\". When the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall. The fall (ground=0) status can be consecutively more than once, Lemming need to remember the walking left or walking right state before fall for resuming walking in the same direction when ground reappears.", "parent_tasks": ["3"]}, {"id": "5", "content": "Implement the output logic for the FSM to drive the walk_left, walk_right, aaah, and digging signals based on the current state.", "source": "In addition to walking and falling, Lemmings can sometimes be told to do useful things, like dig (it starts digging when dig=1). A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0). At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again.", "parent_tasks": ["4"]}, {"id": "6", "content": "Implement the logic to handle the splattering condition when a Lemming falls for more than 20 clock cycles and then hits the ground.", "source": "If a Lemming falls for more than 20 clock cycles then hits the ground, it will in splatter state and cease walking, falling, or digging (all 4 outputs become 0) until the FSMs get reset signal (areset).", "parent_tasks": ["5"]}]