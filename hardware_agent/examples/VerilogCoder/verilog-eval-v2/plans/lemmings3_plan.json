[{"id": "1", "content": "```\nDefine the module TopModule with its input and output ports: clk, areset, bump_left, bump_right, ground, dig, walk_left, walk_right, aaah, and digging.\n\nRetrieved Related Information:\nclk: Clock signal for synchronization\nbump_left: Input signal indicating a bump on the left\nbump_right: Input signal indicating a bump on the right\nground: Input signal indicating the presence of ground\ndig: Input signal indicating the command to dig\naaah: Output signal indicating the Lemming is falling\ndigging: Output signal indicating the Lemming is digging\nIt will switch directions if it hits an obstacle.\nIf a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right.\nIf it's bumped on the right (by receiving a 1 on bump_right), it will walk left.\nWhen ground=0, the Lemming will fall and say 'aaah!'.\nWhen the ground reappears (ground=1), the Lemming will resume walking in the same direction as before the fall.\nA Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0).\nAt that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again.\nBeing told to dig when falling or when there is no ground is ignored.\nA walking Lemming can fall, dig, or switch directions.\nIf more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.\n```\n", "source": "I would like you to implement a module named TopModule with the following interface. All input and output ports are one bit unless otherwise specified.", "parent_tasks": []}, {"id": "2", "content": "```\nDetermine the number of states for the finite state machine (FSM) based on the Lemming's behavior: walking left, walking right, falling, and digging.\n```\n", "source": "Implement a Moore state machine that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left. Assume all sequential logic is triggered on the positive edge of the clock.", "parent_tasks": ["1"]}, {"id": "3", "content": "```\nImplement the state transition logic for the FSM, considering the conditions for walking left, walking right, falling, and digging. Ensure that falling has the highest precedence, followed by digging, and then switching directions.\n```\n", "source": "A walking Lemming can fall, dig, or switch directions. If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.", "parent_tasks": ["2"]}, {"id": "4", "content": "```\nImplement the output logic for the FSM to set walk_left, walk_right, aaah, and digging based on the current state.\n\nRetrieved Related Information:\n- aaah: Output signal indicating the Lemming is falling.\n- digging: Output signal indicating the Lemming is digging.\n- When ground=0, the Lemming will fall and say 'aaah!'.\n- A Lemming can dig if it is currently walking on ground (ground=1 and not falling), and will continue digging until it reaches the other side (ground=0).\n- At that point, since there is no ground, it will fall (aaah!), then continue walking in its original direction once it hits ground again.\n- Being told to dig when falling or when there is no ground is ignored.\n- A walking Lemming can fall, dig, or switch directions.\n- If more than one of these conditions are satisfied, fall has higher precedence than dig, which has higher precedence than switching directions.\n```\n", "source": "In the Lemmings' 2D world, Lemmings can be in the states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left.", "parent_tasks": ["3"]}]